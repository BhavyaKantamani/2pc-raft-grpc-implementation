# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import twopc_pb2 as twopc__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in twopc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class VotingServiceStub(object):
    """----- Q1: Voting Phase -----

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Vote = channel.unary_unary(
                '/twopc.VotingService/Vote',
                request_serializer=twopc__pb2.VoteRequest.SerializeToString,
                response_deserializer=twopc__pb2.VoteResponse.FromString,
                _registered_method=True)


class VotingServiceServicer(object):
    """----- Q1: Voting Phase -----

    """

    def Vote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VotingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Vote': grpc.unary_unary_rpc_method_handler(
                    servicer.Vote,
                    request_deserializer=twopc__pb2.VoteRequest.FromString,
                    response_serializer=twopc__pb2.VoteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'twopc.VotingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('twopc.VotingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VotingService(object):
    """----- Q1: Voting Phase -----

    """

    @staticmethod
    def Vote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.VotingService/Vote',
            twopc__pb2.VoteRequest.SerializeToString,
            twopc__pb2.VoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CoordinatorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestVote = channel.unary_unary(
                '/twopc.CoordinatorService/RequestVote',
                request_serializer=twopc__pb2.VoteRequest.SerializeToString,
                response_deserializer=twopc__pb2.VoteResponse.FromString,
                _registered_method=True)


class CoordinatorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=twopc__pb2.VoteRequest.FromString,
                    response_serializer=twopc__pb2.VoteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'twopc.CoordinatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('twopc.CoordinatorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CoordinatorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.CoordinatorService/RequestVote',
            twopc__pb2.VoteRequest.SerializeToString,
            twopc__pb2.VoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DecisionServiceStub(object):
    """----- Q2: Decision Phase -----

    Used for Python → Go (inside the same container)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReportVote = channel.unary_unary(
                '/twopc.DecisionService/ReportVote',
                request_serializer=twopc__pb2.VoteReport.SerializeToString,
                response_deserializer=twopc__pb2.Ack.FromString,
                _registered_method=True)
        self.StartDecisionPhase = channel.unary_unary(
                '/twopc.DecisionService/StartDecisionPhase',
                request_serializer=twopc__pb2.DecisionRequest.SerializeToString,
                response_deserializer=twopc__pb2.Ack.FromString,
                _registered_method=True)


class DecisionServiceServicer(object):
    """----- Q2: Decision Phase -----

    Used for Python → Go (inside the same container)
    """

    def ReportVote(self, request, context):
        """Python -> Go participant
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartDecisionPhase(self, request, context):
        """Python -> Go coordinator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DecisionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReportVote': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportVote,
                    request_deserializer=twopc__pb2.VoteReport.FromString,
                    response_serializer=twopc__pb2.Ack.SerializeToString,
            ),
            'StartDecisionPhase': grpc.unary_unary_rpc_method_handler(
                    servicer.StartDecisionPhase,
                    request_deserializer=twopc__pb2.DecisionRequest.FromString,
                    response_serializer=twopc__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'twopc.DecisionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('twopc.DecisionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DecisionService(object):
    """----- Q2: Decision Phase -----

    Used for Python → Go (inside the same container)
    """

    @staticmethod
    def ReportVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.DecisionService/ReportVote',
            twopc__pb2.VoteReport.SerializeToString,
            twopc__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartDecisionPhase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.DecisionService/StartDecisionPhase',
            twopc__pb2.DecisionRequest.SerializeToString,
            twopc__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class GlobalDecisionServiceStub(object):
    """Used for Go coordinator → Go participants (across containers)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GlobalDecision = channel.unary_unary(
                '/twopc.GlobalDecisionService/GlobalDecision',
                request_serializer=twopc__pb2.DecisionMessage.SerializeToString,
                response_deserializer=twopc__pb2.Ack.FromString,
                _registered_method=True)


class GlobalDecisionServiceServicer(object):
    """Used for Go coordinator → Go participants (across containers)
    """

    def GlobalDecision(self, request, context):
        """Go -> Go
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GlobalDecisionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GlobalDecision': grpc.unary_unary_rpc_method_handler(
                    servicer.GlobalDecision,
                    request_deserializer=twopc__pb2.DecisionMessage.FromString,
                    response_serializer=twopc__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'twopc.GlobalDecisionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('twopc.GlobalDecisionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GlobalDecisionService(object):
    """Used for Go coordinator → Go participants (across containers)
    """

    @staticmethod
    def GlobalDecision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.GlobalDecisionService/GlobalDecision',
            twopc__pb2.DecisionMessage.SerializeToString,
            twopc__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
